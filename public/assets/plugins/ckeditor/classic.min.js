ckeditors={};executeFunc(function initClassicEditor(){if(typeof ClassicEditor!=="function"){return false}document.querySelectorAll(".ckeditor").forEach(ckeditor=>{ClassicEditor.create(ckeditor,{extraPlugins:[MyCustomUploadAdapterPlugin],autoUpdateElement:true}).then(editor=>{ckeditors[editor.id]=editor}).catch(error=>{console.error(error)})});return true});BaksUploadAdapter=class BaksUploadAdapter{constructor(loader){this.loader=loader}upload(){return this.loader.file.then(file=>new Promise((resolve,reject)=>{this._initRequest();this._initListeners(resolve,reject,file);this._sendRequest(file)}))}abort(){if(this.xhr){this.xhr.abort()}}_initRequest(){const xhr=this.xhr=new XMLHttpRequest;xhr.open("POST","/file/upload/image",true);xhr.responseType="json"}_initListeners(resolve,reject,file){const xhr=this.xhr;const loader=this.loader;const genericErrorText=`Couldn't upload file: ${file.name}.`;xhr.addEventListener("error",()=>reject(genericErrorText));xhr.addEventListener("abort",()=>reject());xhr.addEventListener("load",()=>{const response=xhr.response;if(!response||response.error){return reject(response&&response.error?response.error.message:genericErrorText)}resolve({default:response.url})});if(xhr.upload){xhr.upload.addEventListener("progress",evt=>{if(evt.lengthComputable){loader.uploadTotal=evt.total;loader.uploaded=evt.loaded}})}}_sendRequest(file){const data=new FormData;data.append("file",file);this.xhr.send(data)}};function MyCustomUploadAdapterPlugin(editor){editor.plugins.get("FileRepository").createUploadAdapter=loader=>{return new BaksUploadAdapter(loader)}}